{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SexyPy : the Geekiest Python Ever!","text":"<p>This documentation stands for version 0.7.3 Try Sxpy without installing it! : Web REPL</p>"},{"location":"#what-is-sexypy","title":"What is SexyPy?","text":"<p>SexyPy stands for S-expression-ish(y) Python. I'll use the abbreviation Sxpy throughout this documentation. Sxpy provides a new s-expression-like syntax for Python. (Thus, macro system too)</p> <p>Sxpy is highly inspired by Clojure and Hy. I started this project because I want something slightly different from Hy. As a standalone language, Hy evolves fast. It can be good in general. But it's hard for me to keep track of the breaking changes in Hy.</p>"},{"location":"macros/","title":"Macros","text":"<p>Sxpy's macro system is highly inspired by Clojure's macro system. You can check out the Chapter 7 and Chapter 8 of \"Brave Clojure\" for more information about Clojure's macro system.</p>"},{"location":"macros/#expression-nodes","title":"Expression Nodes","text":"<p>These nodes are defined in <code>src/sexypy/core/nodes.py</code>.</p> <p>You can check out how to manipulate these nodes in</p> <ul> <li>the definitions of nodes themselves</li> <li>the definitions of built-in macros in <code>src/sexypy/macros/sugar.sy</code>.</li> </ul>"},{"location":"macros/#quote","title":"quote","text":"<pre><code>'expr\n</code></pre>"},{"location":"macros/#syntax-quote","title":"syntax-quote","text":"<pre><code>`expr\n</code></pre>"},{"location":"macros/#unquote","title":"unquote","text":"<pre><code>~expr\n</code></pre>"},{"location":"macros/#unquote-splicing","title":"unquote-splicing","text":"<pre><code>~@expr\n</code></pre>"},{"location":"macros/#macro-definition","title":"Macro Definition","text":"<p>Just change <code>def</code> in function definition to <code>defmacro</code>. And macros usually return a quoted expression. <pre><code>(defmacro name [args*]\n  body*)\n</code></pre></p>"},{"location":"macros/#macro-example","title":"Macro Example","text":"<p><pre><code>(defmacro when [pred *body]\n  (return `(if ~pred\n             (do ~@body))))\n\n(defmacro cond [*body]\n  (def recur [*body]\n    (if (&lt; (len body) 4)\n        (return `(if ~@body))\n        (do (= [test then *orelse] body)\n            (return `(if ~test ~then ~(recur *orelse))))))\n  (return (recur *body)))\n\n(defmacro -&gt; [x *fs]\n  (if (== 0 (len fs))\n      (return x))\n  (= [f *rest] fs)\n  (if (isinstance f Paren)\n      (do (f.list.insert 1 x)\n          (return `(-&gt; ~f ~@rest)))\n      (return `(-&gt; (~f ~x) ~@rest))))\n</code></pre> You can find more in <code>src/sexypy/macros/sugar.sy</code>.</p>"},{"location":"why-sxpy/","title":"Why Sxpy?","text":""},{"location":"why-sxpy/#just-a-new-syntax-for-python","title":"Just a new syntax for Python","text":"<p>Sxpy is not a new language. It is just a new syntax for Python. You can just think in Python, write in Sxpy. You'll experience less breaking changes. It also provides some pythonic syntax such as \"list comprehensions\".</p>"},{"location":"why-sxpy/#python-interop-100-compatible-with-vanila-python","title":"Python Interop: 100% Compatible with Vanila Python","text":"<p>Sxpy is 100% compatible with Python. You can use any Python libraries and modules in Sxpy. You can also use Sxpy modules in Python.</p>"},{"location":"why-sxpy/#interop-example","title":"Interop example","text":""},{"location":"why-sxpy/#import-numpy-in-sxpy","title":"Import numpy in Sxpy","text":"<pre><code>(import numpy as np)\n</code></pre>"},{"location":"why-sxpy/#import-sxpy-code-in-python","title":"Import Sxpy Code in Python","text":"<p>When you have function <code>bar</code> in <code>foo.sy</code> file <pre><code>import sxpy # it makes python interop available\nfrom foo import bar\nfoo()\n</code></pre></p>"},{"location":"why-sxpy/#macro-system","title":"Macro system","text":"<p>Sxpy has a Lisp-like macro system. This can be achieved by its s-expression-like syntax.</p> <p>I recommend reading Paul Graham\u2019s article Beating the Average, which illustrates why macro systems are valuable.</p>"},{"location":"why-sxpy/#macro-example","title":"Macro example","text":"<p><code>do-while</code> macro <pre><code>; do-while macro example\n(defmacro do-while [pred *body]\n  (return `(do\n             ~@body\n             (while ~pred\n               ~@body))))\n\n(do-while False (print \"Does it really happen?\"))\n</code></pre> Translated into Python: <pre><code>print('Does it really happen?')\nwhile False:\n    print('Does it really happen?')\n</code></pre></p>"},{"location":"why-sxpy/#structural-editing","title":"Structural editing","text":"<p>Check out the Structural Editing section in Clojure documentation.</p>"},{"location":"syntax/expressions/","title":"Expressions","text":""},{"location":"syntax/expressions/#operators","title":"Operators","text":""},{"location":"syntax/expressions/#boolean-operators","title":"Boolean Operators","text":"<p>Sxpy version <pre><code>(and expr1 expr2 ...)\n</code></pre> Python version <pre><code>expr1 and expr2 and ...\n</code></pre></p>"},{"location":"syntax/expressions/#binary-operators","title":"Binary Operators","text":"<p>Sxpy version <pre><code>(+ n1 n2 ...)\n</code></pre> Python version <pre><code>n1 + n2 + ...\n</code></pre></p>"},{"location":"syntax/expressions/#unary-operators","title":"Unary Operators","text":"<p>Sxpy version <pre><code>(- n)\n</code></pre> Python version <pre><code>-n\n</code></pre></p>"},{"location":"syntax/expressions/#comparison-operators","title":"Comparison Operators","text":""},{"location":"syntax/expressions/#_1","title":"<code>==</code>","text":"<p>Sxpy version <pre><code>(== expr1 expr2 expr3 ...)\n</code></pre> Python version <pre><code>expr1 == expr2 == expr3 == ...\n</code></pre></p>"},{"location":"syntax/expressions/#_2","title":"<code>&gt;</code>","text":"<p>Python version <pre><code>(&gt; expr1 expr2 expr3 ...)\n</code></pre> Sxpy version <pre><code>expr1 &gt; expr2 &gt; expr3 &gt; ...\n</code></pre></p>"},{"location":"syntax/expressions/#_3","title":"<code>:=</code>","text":"<p>Sxpy version <pre><code>(:= name value)\n</code></pre> Python version <pre><code>(name := value)\n</code></pre></p>"},{"location":"syntax/expressions/#labmda","title":"<code>labmda</code>","text":"<p>Sxpy version <pre><code>(lambda [arg1 arg2 ...] body)\n# or syntactic sugar fn\n(fn [arg1 arg2 ...] body)\n</code></pre> Python version <pre><code>lambda arg1, arg2, ...: body\n</code></pre></p>"},{"location":"syntax/expressions/#if-expression","title":"<code>if</code> expression","text":"<p>Sxpy version <pre><code>(ife test then other)\n</code></pre> Python version <pre><code>then if test else other\n</code></pre></p>"},{"location":"syntax/expressions/#collection-literals","title":"Collection Literals","text":""},{"location":"syntax/expressions/#list","title":"List","text":"<p>Sxpy version <pre><code>[item1 item2 ...]\n</code></pre> Python version <pre><code>[item1, item2, ...]\n</code></pre></p>"},{"location":"syntax/expressions/#dictionary","title":"Dictionary","text":"<p>Sxpy version <pre><code>{key1 value1 key2 value2 ...}\n</code></pre> Python version <pre><code>{key1: value1, key2: value2, ...}\n</code></pre></p>"},{"location":"syntax/expressions/#set","title":"Set","text":"<p>Sxpy version <pre><code>{, item1 item2 ...}\n</code></pre> Python version <pre><code>{item1, item2, ...}\n</code></pre></p>"},{"location":"syntax/expressions/#tuple","title":"Tuple","text":"<p>Sxpy version <pre><code>(, item1 item2 ...)\n</code></pre> Python version <pre><code>(item1, item2, ...)\n</code></pre></p>"},{"location":"syntax/expressions/#comprehensions","title":"Comprehensions","text":""},{"location":"syntax/expressions/#list-comprehension","title":"List Comprehension","text":"<p>Sxpy version <pre><code>[(* 2 x) for x in (range 10) if (== (% x 2) 0)]\n</code></pre> Python version <pre><code>[2 * x for x in range(10) if x % 2 == 0]\n</code></pre></p>"},{"location":"syntax/expressions/#dictionary-comprehension","title":"Dictionary Comprehension","text":"<p>Sxpy version <pre><code>{(* 2 x) (* 3 x) for x in (range 10) if (== (% x 2) 0)}\n</code></pre> Python version <pre><code>{2 * x: 3 * x for x in range(10) if x % 2 == 0}\n</code></pre></p>"},{"location":"syntax/expressions/#set-comprehension","title":"Set Comprehension","text":"<p>Sxpy version <pre><code>{, (* 2 x) for x in (range 10) if (== (% x 2) 0)}\n</code></pre> Python version <pre><code>{2 * x for x in range(10) if x % 2 == 0}\n</code></pre></p>"},{"location":"syntax/expressions/#generator-expression","title":"Generator Expression","text":"<p>Sxpy version <pre><code>((* 2 x) for x in (range 10) if (== (% x 2) 0))\n</code></pre> Python version <pre><code>(2 * x for x in range(10) if x % 2 == 0)\n</code></pre></p>"},{"location":"syntax/expressions/#await","title":"<code>await</code>","text":"<p>Sxpy version <pre><code>(await expr)\n</code></pre> Python version <pre><code>await expr\n</code></pre></p>"},{"location":"syntax/expressions/#yield","title":"<code>yield</code>","text":"<p>Sxpy version <pre><code>(yield expr)\n</code></pre> Python version <pre><code>yield expr\n</code></pre></p>"},{"location":"syntax/expressions/#yield-from","title":"<code>yield from</code>","text":"<p>Sxpy version <pre><code>(yield-from expr)\n</code></pre> Python version <pre><code>yield from expr\n</code></pre></p>"},{"location":"syntax/expressions/#function-call","title":"Function Call","text":"<p>Sxpy version <pre><code>(func-name arg1 arg2 *args :kwarg1 value1 :kwarg2 value2 **kwargs)\n</code></pre> Python version <pre><code>func_name(arg1, arg2, *args, kwarg1=value1, kwarg2=value2, **kwargs)\n</code></pre></p>"},{"location":"syntax/expressions/#formatted-string-literals","title":"Formatted String Literals","text":"<p>Sxpy version <pre><code>(= name \"World\")\nf\"Hello, {(* 2 name)}!\"\n</code></pre> Python version <pre><code>name = \"World\"\nf\"Hello, {2 * name}!\"\n</code></pre></p>"},{"location":"syntax/expressions/#attribute","title":"Attribute","text":"<p>Sxpy version <pre><code>(. obj attr)\n</code></pre> Python version <pre><code>obj.attr\n</code></pre></p>"},{"location":"syntax/expressions/#method-call","title":"Method Call","text":"<p>Sxpy version <pre><code>(.method-name obj arg1 arg2 *args :kwarg1 value1 :kwarg2 value2 **kwargs)\n</code></pre> Python version <pre><code>obj.method_name(arg1, arg2, *args, kwarg1=value1, kwarg2=value2, **kwargs)\n</code></pre></p>"},{"location":"syntax/expressions/#subscription","title":"Subscription","text":""},{"location":"syntax/expressions/#simple-subscription","title":"Simple Subscription","text":"<p>Sxpy version <pre><code>(sub obj i1 i2)\n</code></pre> Python version <pre><code>obj[i1][i2]\n</code></pre></p>"},{"location":"syntax/expressions/#tuple-subscription","title":"Tuple Subscription","text":"<p>Sxpy version <pre><code>(sub obj (, i1 i2 ...))\n</code></pre> Python version <pre><code>obj[i1, i2, ...]\n</code></pre></p>"},{"location":"syntax/expressions/#slice","title":"Slice","text":""},{"location":"syntax/expressions/#slice-subscription","title":"Slice Subscription","text":"<p>Sxpy version <pre><code>(sub obj [: start stop step])\n</code></pre> Python version <pre><code>obj[start:stop:step]\n</code></pre></p>"},{"location":"syntax/expressions/#slice-with-emptiness","title":"Slice with Emptiness","text":"<p>Sxpy version <pre><code>(sub obj [: start])\n(sub obj [: _ stop])\n(sub obj [: start _ step])\n</code></pre> Python version <pre><code>obj[start:]\nobj[:stop]\nobj[start::step]\n</code></pre></p>"},{"location":"syntax/overview/","title":"Overview","text":"<p>In this section, I'll give a pair of Sxpy code and corresponding Python code for each AST node. Checkout the Python AST documentation for more information about each node.</p> <p>Corresponding python code is generated by <code>s2py</code> command in usage section.</p>"},{"location":"syntax/overview/#example","title":"example","text":"<p>sxpy code <pre><code>(print \"Hello, World!\")\n</code></pre> python code <pre><code>print(\"Hello, World!\")\n</code></pre></p>"},{"location":"syntax/statements/","title":"Statements","text":""},{"location":"syntax/statements/#function-definitions","title":"Function Definitions","text":"<p>Sxpy version <pre><code>(deco [decorator1\n       decorator2]\n  (def function-name [arg1 arg2 *args :kwarg1 value1 :kwarg2 value2 **kwargs]\n    \"docstring\"\n    body1\n    body2\n    (return value)))\n</code></pre> Python version <pre><code>@decorator1\n@decorator2\ndef function_name(arg1, arg2, *args, kwarg1=value1, kwarg2=value2, **kwargs):\n    \"\"\"docstring\"\"\"\n    body1\n    body2\n    return value\n</code></pre></p>"},{"location":"syntax/statements/#async-function-definitions","title":"Async Function Definitions","text":"<p>Use <code>async-def</code> instead of <code>def</code>.</p>"},{"location":"syntax/statements/#class-definition","title":"Class Definition","text":"<p>Sxpy version <pre><code>(deco [decorator1\n       decorator2]\n  (class class-name [base-class1 base-class2]\n    \"docstring\"\n    body))\n</code></pre> Python version <pre><code>@decorator1\n@decorator2\nclass class_name(base_class1, base_class2):\n    \"\"\"docstring\"\"\"\n\n    body\n</code></pre></p>"},{"location":"syntax/statements/#del","title":"<code>del</code>","text":"<p>Sxpy version <pre><code>(del x y z ...)\n</code></pre> Python version <pre><code>del x, y, z, ...\n</code></pre></p>"},{"location":"syntax/statements/#assignment","title":"Assignment","text":"<p>Sxpy version <pre><code>(= x value)\n(= [x y *args] [value1 value2 value3 value4, ...]) ; destructuring assignment\n</code></pre> Python version <pre><code>x = value\n[x, y, *args] = [value1, value2, value3, value4, ...]\n# then args = [value3, value4, ...]\n</code></pre></p>"},{"location":"syntax/statements/#augmented-assignment","title":"Augmented Assignment","text":"<p>Sxpy version <pre><code>(+= x value)\n(-= x value)\n(*= x value)\n(/= x value)\n...\n</code></pre> Python version <pre><code>x += value\nx -= value\nx *= value\nx /= value\n...\n</code></pre></p>"},{"location":"syntax/statements/#type-annotations","title":"Type Annotations","text":""},{"location":"syntax/statements/#simple-type-annotations","title":"Simple Type Annotations","text":"<p>Sxpy version <pre><code>(= x ^type)\n</code></pre> Python version <pre><code>x: type\n</code></pre></p>"},{"location":"syntax/statements/#assignment-with-type-annotations","title":"Assignment with Type Annotations","text":"<p>Sxpy version <pre><code>(= a ^int 1)\n</code></pre> Python version <pre><code>a: int = 1\n</code></pre></p>"},{"location":"syntax/statements/#function-definition-with-type-annotations","title":"Function Definition with Type Annotations","text":"<p>Sxpy version <pre><code>(def a [b ^int c] ^float\n  (return (+ b c)))\n</code></pre> Python version <pre><code>def a(b: int, c) -&gt; float:\n    return b + c\n</code></pre></p>"},{"location":"syntax/statements/#pydantic-example","title":"Pydantic Example","text":"<p>Sxpy version <pre><code>(class User [BaseModel]\n  (= id ^int)\n  (= name ^str \"John Doe\")\n  (= signup_ts ^(| datetime None))\n  (= tastes ^(sub dict (, str PositiveInt))))\n</code></pre> Python version <pre><code>class User(BaseModel):\n    id: int\n    name: str = \"John Doe\"\n    signup_ts: datetime | None\n    tastes: dict[str, PositiveInt]\n</code></pre></p>"},{"location":"syntax/statements/#for","title":"<code>for</code>","text":"<p>Sxpy version <pre><code>(for x in xs\n  body1\n  body2)\n</code></pre> Python version <pre><code>for x in xs:\n    body1\n    body2\n</code></pre></p>"},{"location":"syntax/statements/#asynchronous-for","title":"Asynchronous <code>for</code>","text":"<p>Use <code>async-for</code> instead of <code>for</code>.</p>"},{"location":"syntax/statements/#while","title":"<code>while</code>","text":"<p>Sxpy version <pre><code>(while condition\n  body1\n  body2)\n</code></pre> Python version <pre><code>while condition:\n    body1\n    body2\n</code></pre></p>"},{"location":"syntax/statements/#if","title":"<code>if</code>","text":"<p>Sxpy version <pre><code>(if clause\n    then\n    else)\n</code></pre> Python version <pre><code>if clause:\n    then\nelse:\n    else\n</code></pre></p>"},{"location":"syntax/statements/#do-block","title":"<code>do</code> block","text":"<p>If you want to use multiple statements in <code>then-body</code> or <code>else-body</code>, you can use <code>do</code> block. Sxpy version <pre><code>(if clause\n    (do then1 then2)\n    (do else1 else2))\n</code></pre> Python version <pre><code>if clause:\n    then1\n    then2\nelse:\n    else1\n    else2\n</code></pre></p>"},{"location":"syntax/statements/#with","title":"<code>with</code>","text":""},{"location":"syntax/statements/#simple-with","title":"Simple <code>with</code>","text":"<p>Sxpy version <pre><code>(with [expression]\n  body)\n</code></pre> Python version <pre><code>with expression:\n    body\n</code></pre></p>"},{"location":"syntax/statements/#with-with-alias","title":"<code>with</code> with alias","text":"<p>Sxpy version <pre><code>(with [expression as target]\n  body)\n</code></pre> Python version <pre><code>with expression as target:\n    body\n</code></pre></p>"},{"location":"syntax/statements/#asynchronous-with","title":"Asynchronous <code>with</code>","text":"<p>Use <code>async-with</code> instead of <code>with</code>.</p>"},{"location":"syntax/statements/#match","title":"<code>match</code>","text":"<p>Sxpy version <pre><code>(match x\n  (case \"Relevant\"\n        ...)\n  (case None\n        ...)\n  (case [1 2]\n        ...)\n  (case [1 2 *rest]\n        ...)\n  (case [*_]\n    ...)\n  (case {1 _ 2 _}\n    ...)\n  (case {**rest}\n    ...)\n  (case (Point2D 0 0)\n    ...)\n  (case (Point3D :x 0 :y 0 :z 0)\n    ...)\n  (case [x] as y\n    ...)\n  (case _\n    ...)\n  (case (| [x] y)\n    ...))\n</code></pre> Python version <pre><code>match x:\n    case \"Relevant\":\n        ...\n    case None:\n        ...\n    case [1, 2]:\n        ...\n    case [1, 2, *rest]:\n        ...\n    case [*_]:\n        ...\n    case {1: _, 2: _}:\n        ...\n    case {**rest}:\n        ...\n    case Point2D(0, 0):\n        ...\n    case Point3D(x=0, y=0, z=0):\n        ...\n    case [x] as y:\n        ...\n    case _:\n        ...\n    case [x] | y:\n        ...\n</code></pre></p>"},{"location":"syntax/statements/#raise","title":"<code>raise</code>","text":"<p>Sxpy version <pre><code>(raise Exception)\n(raise Exception from ValueError)\n</code></pre> Python version <pre><code>raise Exception\nraise Exception from ValueError\n</code></pre></p>"},{"location":"syntax/statements/#try","title":"<code>try</code>","text":"<p>Sxpy version <pre><code>(try\n  body1\n  body2\n  (except [Exception1]\n    body3\n    body4)\n  (except [Exception2 as e]\n    body5\n    body6)\n  (else\n    body7\n    body8)\n  (finally\n    body9\n    body10))\n</code></pre> Python version <pre><code>try:\n    body1\n    body2\nexcept Exception1:\n    body3\n    body4\nexcept Exception2 as e:\n    body5\n    body6\nelse:\n    body7\n    body8\nfinally:\n    body9\n    body10\n</code></pre></p>"},{"location":"syntax/statements/#except-clause","title":"<code>except*</code> clause","text":"<p>Sxpy version <pre><code>(try\n  (raise BlockingIOError)\n  (except* [BlockingIOError as e]\n    (print (repr e))))\n</code></pre> Python version <pre><code>try:\n    raise BlockingIOError\nexcept* BlockingIOError as e:\n    print(repr(e))\n</code></pre></p>"},{"location":"syntax/statements/#assert","title":"<code>assert</code>","text":"<p>Sxpy version <pre><code>(assert condition)\n(assert condition \"message\")\n</code></pre> Python version <pre><code>assert condition\nassert condition, \"message\"\n</code></pre></p>"},{"location":"syntax/statements/#import","title":"<code>import</code>","text":""},{"location":"syntax/statements/#simple-import","title":"Simple <code>import</code>","text":"<p>Sxpy version <pre><code>(import module)\n(import module as alias)\n</code></pre> Python version <pre><code>import module\nimport module as alias\n</code></pre></p>"},{"location":"syntax/statements/#from-import","title":"<code>from</code> import","text":""},{"location":"syntax/statements/#without-alias","title":"without alias","text":"<p>Sxpy version <pre><code>(from module [name1 name2 name3])\n</code></pre> Python version <pre><code>from module import name1, name2, name3\n</code></pre></p>"},{"location":"syntax/statements/#with-alias","title":"with alias","text":"<p>Sxpy version <pre><code>(from module [name1\n              name2 as alias\n              name3])\n</code></pre> Python version <pre><code>from module import name1\nfrom module import name2 as alias\nfrom module import name3\n</code></pre></p>"},{"location":"syntax/statements/#global","title":"<code>global</code>","text":"<p>Sxpy version <pre><code>(global x y z ...)\n</code></pre> Python version <pre><code>global x, y, z, ...\n</code></pre></p>"},{"location":"syntax/statements/#nonlocal","title":"<code>nonlocal</code>","text":"<p>Sxpy version <pre><code>(nonlocal x y z ...)\n</code></pre> Python version <pre><code>nonlocal x, y, z, ...\n</code></pre></p>"},{"location":"syntax/statements/#pass","title":"<code>pass</code>","text":"<p>Sxpy version <pre><code>(pass)\n</code></pre> Python version <pre><code>pass\n</code></pre></p>"},{"location":"syntax/statements/#break","title":"<code>break</code>","text":"<p>Sxpy version <pre><code>(break)\n</code></pre> Python version <pre><code>break\n</code></pre></p>"},{"location":"syntax/statements/#continue","title":"<code>continue</code>","text":"<p>Sxpy version <pre><code>(continue)\n</code></pre> Python version <pre><code>continue\n</code></pre></p>"},{"location":"usage/cli/","title":"Command Line Interface","text":""},{"location":"usage/cli/#repl","title":"REPL","text":"<pre><code>spy\n#or\nspy -t #if you want to print python translation.\n</code></pre>"},{"location":"usage/cli/#run-from-source","title":"Run from source","text":"<pre><code>spy {filename}.sy\n</code></pre>"},{"location":"usage/cli/#run-translation","title":"Run translation","text":"<p><pre><code>s2py {filename}.sy\n</code></pre> It just displays translation. (don't run it)</p>"},{"location":"usage/cli/#run-tests-for-development","title":"Run Tests (for development)","text":"<pre><code># in project root directory\npython -m unittest\n#or\nspy -m unittest\n</code></pre>"},{"location":"usage/getting-started/","title":"Getting Started","text":""},{"location":"usage/getting-started/#simple-web-repl","title":"Simple Web REPL","text":"<p>You can try Sxpy without installing at https://jethack23.github.io/sxpy-web/.</p>"},{"location":"usage/getting-started/#installation","title":"Installation","text":""},{"location":"usage/getting-started/#using-pip","title":"Using pip","text":"<pre><code>pip install sexypy\n</code></pre>"},{"location":"usage/getting-started/#manual-installation-for-development","title":"Manual Installation (for development)","text":"<pre><code>poetry install --no-root # for dependency\npip install -e . # for development\n</code></pre>"},{"location":"usage/getting-started/#poetry","title":"Poetry","text":"<p>I recommend using Poetry for development. And turn off virtual environment creation in Poetry settings. <pre><code>poetry config virtualenvs.create false\n</code></pre></p>"}]}