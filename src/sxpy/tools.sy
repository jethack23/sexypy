(require sxpy.macros *)

(import ast)
(import argparse)
(import io)
(import os)
(import os.path as osp)
(import runpy)
(import sys)

(import black)
(import isort)

(from sxpy.core.parser [parse])
(from sxpy.core.macro [macroexpand-then-compile])

(def ast-to-python [st]
  (return (str (ast.unparse st))))

(def src-to-python [src :include-meta False]
  (return (.join "\n" (map ast-to-python
                           (macroexpand-then-compile
                             (parse src)
                             :include-meta include-meta)))))

(def black-src [src]
  (return (.rstrip (black.format-str src :mode (black.FileMode)) "\n")))

(= argparser (argparse.ArgumentParser))
(argparser.add-argument "filename" :nargs "?" :default "")
(argparser.add-argument "-t" "--translate"
                        :dest "translate"
                        :action "store_true"
                        :default False)
(argparser.add-argument "-m"
                        :dest "module_name"
                        :action "store")
(argparser.add-argument "--meta"
                        :dest "include_meta"
                        :action "store_true")


(def transcompile []
  (= args (argparser.parse-args))
  (= file (osp.join (os.getcwd) args.filename))
  (with [(open file "rb") as f]
    (= org (.decode (f.read) "utf-8")))
  (= blacked (black-src (src-to-python org :include-meta args.include-meta)))
  (= isorted (isort.code blacked))
  (print isorted))

(def _is-sy-file [filename]
  (return (and (osp.isfile filename)
               (== (sub (osp.splitext filename) 1) ".sy"))))

(def repl [translate]
  (while True
    (= line (input "repl > \n"))
    (= src "")
    (while (!= line "")
      (+= src (+ "\n" line))
      (= line (input "")))
    (try
      (do (= parsed (parse src))
          (= stl (macroexpand-then-compile parsed (globals)))
          (if translate
              (do (print "python translation")
                  (print (.join "\n" (list (map ast-to-python stl))))
                  (print "")))
          (print "result")
          (for st stl
            (eval (compile (ast.Interactive :body [st]) "" "single")
                  (globals)))
          (print "\n"))
      (except [Exception as e]
        (raise e)
        (print "Exception: " e)))))

(def run []
  (= args (argparser.parse-args))

  ;; remove options from sys.argv
  (= argv sys.argv)
  (= option-removed [])
  (while argv
    (if (.startswith (:= larg (argv.pop)) "-")
        (= option-removed [])
        (option-removed.append larg)))
  (while option-removed
    (argv.append (option-removed.pop)))
  
  (cond (:= fname args.filename)
        (runpy.run-path fname :run-name "__main__")

        (:= mname args.module-name)
        (runpy.run-module mname :run-name "__main__" :alter-sys True)

        (repl args.translate)))
