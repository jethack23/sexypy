(require sxpy.macros *)

(import argparse)
(import ast)
(import io)
(import os)
(import os.path as osp)
(import runpy)
(import sys)

(import black)
(import isort)

(from sxpy.core.nodes *)
(from sxpy.core.parser [parse])
(from sxpy.core.macro [macroexpand-then-compile])

(def ast-to-python [st]
  (return (str (ast.unparse st))))

(def src-to-python [src :include-meta False]
  (return (.join "\n" (map ast-to-python
                           (macroexpand-then-compile
                             (parse src)
                             :include-meta include-meta)))))

(def black-src [src]
  (try
    (= rst (.rstrip (black.format-str src :mode (black.FileMode)) "\n"))
    (except
      (print src)
      (raise Exception)))
  (return rst))

(= argparser (argparse.ArgumentParser))
(argparser.add-argument "--meta"
                        :dest "include_meta"
                        :action "store_true")

(def transcompile []
  (= [args more-args] (argparser.parse-known-args))
  (= file (osp.join (os.getcwd) (sub more-args 0)))
  (with [(open file "rb") as f]
    (= org (.decode (f.read) "utf-8")))
  (= pysrc (src-to-python org :include-meta args.include-meta))
  (= isorted (isort.code pysrc))
  (= blacked (black-src isorted))
  (print blacked))

(def _is-sy-file [filename]
  (return (and (osp.isfile filename)
               (== (sub (osp.splitext filename) 1) ".sy"))))
(def repl [translate]
  (= scope {})
  (while True
    (try
      (do
        (= paren-depth 0)
        (= in-string False)
        (= line (input "repl> "))
        (= src line)
        (while True
          (for c in line
            (cond in-string
                  (if (== c "\"")
                      (= in-string False)
                      (continue))

                  (== c "\"")
                  (= in-string True)
                  
                  (in c "([{")
                  (+= paren-depth 1)
                  
                  (in c ")]}")
                  (-= paren-depth 1)))
          (if (== paren-depth 0)
              (break))
          (= line (input ""))
          (+= src (+ "\n" line)))
        (= parsed (parse src))
        (= stl (macroexpand-then-compile parsed scope))
        (if translate
            (do ;; (print "python translation")
              (print (.join "\n" (list (map ast-to-python stl))))
              ;; (print "")
              ))
        ;; (print "result")
        (for st stl
          (eval (compile (ast.Interactive :body [st]) "" "single")
                scope))
        ;; (print "\n")
        )
      (except [EOFError as e]
        (raise e))
      (except [KeyboardInterrupt]
        (print "\nKeyboard Interrupt")
        (continue))
      (except [Exception as e]
        (print "Exception: " e)
        (continue)))))

(def run []
  (cond (< (len sys.argv) 2)
        (repl False)

        (== (sub sys.argv 1) "-m")
        (do (sys.argv.pop 1)
            (= mname (sys.argv.pop 1))
            (runpy.run-module (.replace mname "-" "_") :run-name "__main__" :alter-sys True))

        (== (sub sys.argv 1) "-t")
        (repl True)

        (do (= fpath (sys.argv.pop 1))
            (runpy.run-path fpath :run-name "__main__"))))

(if (== __name__ "__main__")
    (run))
